<!DOCTYPE html>
<html ng-app="bakalavr">
  <head>
    <title><%=typeof title == 'undefined' ? 'Сайт міської поліклініки' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--STYLES-->
    <link rel="stylesheet" href="/bower/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bower/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/bower/wow/css/libs/animate.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <!--

    Client-side Javascript
    ========================

    You can always bring in JS files manually with `script` tags, or asynchronously
    on the client using a solution like AMD (RequireJS).  Or, if you like, you can
    take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

    By default, files in your `assets/js` folder are included here
    automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
    CoffeeScript (.coffee) are supported. In production, your scripts will be minified
    and concatenated into a single file.

    To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Change the order of your scripts
        + Import scripts from other directories
        + Use a different preprocessor, like TypeScript

  -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/bower/jquery/dist/jquery.min.js"></script>
    <script src="/bower/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="/bower/angular/angular.js"></script>
    <script src="/bower/ngmap/build/scripts/ng-map.js"></script>
    <script src="/bower/wow/dist/wow.min.js"></script>
    <script src="/app/app.js"></script>
    <script src="/app/employeeController.js"></script>
    <script src="/app/wow.js"></script>
    <!--SCRIPTS END-->
  </head>

  <body>

  <nav class="navbar navbar-default navbar-fixed-top" style="background-color: #e6e6e6;">
    <div class="container-fluid">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed"
                data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"
                aria-expanded="false">
          <span class="sr-only">Навігація</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="/">Міська поліклініка</a>
      </div>

      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav navbar-right">
          <li><a href="/">Головна</a></li>
          <li><a href="/employee-list">Список лікарів</a></li>
          <li><a href="/about">Про нас</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container">
    <div class="main">
      <%- body %>
    </div>
  </div>


  <nav class="navbar navbar-default navbar-fixed-bottom" style="background-color: #e6e6e6; margin-top: 2px;">
    <div class="container-fluid">
      <div class="nav">
        <div class="row">
          <div class="col-xs-12">
            <div class="text-center center-block">
              <a href="https://www.facebook.com/bootsnipp"><i id="social-fb" class="fa fa-facebook-square fa-3x social"></i></a>
              <a href="https://twitter.com/bootsnipp"><i id="social-tw" class="fa fa-twitter-square fa-3x social"></i></a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>


  <!--
      Client-side Templates
      ========================

      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.

      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).

      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Import templates from other directories
          + Use a different template engine (handlebars, jade, dust, etc.)
          + Internationalize your client-side templates using a server-side
            stringfile before they're served.
  -->

  <!--TEMPLATES-->
  
  <!--TEMPLATES END-->
  </body>
</html>
